function [J, grad] = cofiCostFunc(params, Y, R, num_users, num_movies, ...
                                  num_features, lambda)
%COFICOSTFUNC Collaborative filtering cost function
%   [J, grad] = COFICOSTFUNC(params, Y, R, num_users, num_movies, ...
%   num_features, lambda) returns the cost and gradient for the
%   collaborative filtering problem.
%

% Unfold the U and W matrices from params
X = reshape(params(1:num_movies*num_features), num_movies, num_features);
Theta = reshape(params(num_movies*num_features+1:end), ...
                num_users, num_features);

            
% We return the following values : 
% J = 0;
% X_grad = zeros(size(X));
% Theta_grad = zeros(size(Theta));

matrixJ = (( X * Theta' - Y ).^2).*R; 

J = (1/2)*sum(sum(matrixJ));

X_grad = (( X * Theta' - Y ).*R)*Theta +lambda *; 

Theta_grad = (( X * Theta' - Y ).*R)'* X ; 

grad = [X_grad(:); Theta_grad(:)];

% now we add the regularization feature to J : 
sumTheta2 = sum(sum(Theta.^2)) ; 
sumX2 = sum(sum(X.^2)); 

J = J + (lambda/2)*(sumTheta2 + sumX2) ; 
%  NOTE: 
%
%        X - num_movies  x num_features matrix of movie features
%        Theta - num_users  x num_features matrix of user features
%        Y - num_movies x num_users matrix of user ratings of movies
%        R - num_movies x num_users matrix, where R(i, j) = 1 if the 
%            i-th movie was rated by the j-th user
%        X_grad - num_movies x num_features matrix, containing the 
%                 partial derivatives w.r.t. to each element of X
%        Theta_grad - num_users x num_features matrix, containing the 
%                     partial derivatives w.r.t. to each element of Theta
%
% =============================================================
 


end
